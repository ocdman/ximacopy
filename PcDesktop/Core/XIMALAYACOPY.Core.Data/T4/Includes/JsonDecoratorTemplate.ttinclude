<#+
    // <copyright file="JsonDecoratorTemplate.tt" company="">
    //  Copyright © . All Rights Reserved.
    // </copyright>

    public class JsonDecoratorTemplate : CSharpTemplate
    {
        private XIMALAYACOPY.Tools.T4.T4ModelInfo _model;
        
        public JsonDecoratorTemplate(XIMALAYACOPY.Tools.T4.T4ModelInfo model)
        {
            _model = model;
        }

        /// <summary>
        /// 获取 生成的文件名，根据模型名定义
        /// </summary>
        public string FileName
        {
            get
            { 
                return string.Format("{0}Decorator.generated.cs", _model.Name);
            }
        }

        public override string TransformText()
        {
#>
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//		如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 <#=            _model.Name #>ConfigurationAppend 分部方法。
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using FluentJson.Configuration;
using FluentJson;
using XIMALAYACOPY.Core.Data.Decorator;
using XIMALAYACOPY.Core.Models.<#=            _model.ModuleName#>;

namespace XIMALAYACOPY.Core.Data
{
    /// <summary>
    ///     <#=            _model.Description #>
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public partial class <#=            _model.Name #>Decorator<T> : Decorator<T>
    {
        partial void doAddOtherConfig();
        /// <summary>
        ///     
        /// </summary>
        /// <typeparam name="result"></typeparam>
        public <#=            _model.Name #>Decorator(Result<T> result)
            : base(result)
        {

        }
        /// <summary>
        ///     
        /// </summary>
        /// <typeparam name="result"></typeparam>
        public override void doAddConfig()
        {
            base.doAddConfig();
            this.Config.MapType<<#=            _model.ClassName #>>(map => map
                <#+ 
            string field = string.Empty;
            
            foreach(var key in _model.Maps)
            {
                var prop= _model.Properties.FirstOrDefault(p => p.Name == key.Key);

                if(prop.Name == key.Key){
                    field = string.Format( @".Field<{0}>(field => field.{1}, type => type.To(""{2}""))",prop.PropertyType.ToString(),key.Key,key.Value);
                    #>
                    <#=                    field #>
<#+ 
                }
            } 
#>
            );
            this.doAddOtherConfig();
        }
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
