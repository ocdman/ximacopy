<#+
// <copyright file="JsonConfigurationDecoratorTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class JsonConfigurationDecoratorTemplate : CSharpTemplate
{
	private XIMALAYACOPY.Tools.T4.T4ModelInfo _model;
        
    public JsonConfigurationDecoratorTemplate(XIMALAYACOPY.Tools.T4.T4ModelInfo model)
    {
        _model = model;
    }

    /// <summary>
    /// 获取 生成的文件名，根据模型名定义
    /// </summary>
    public string FileName
    {
        get
        { 
            return string.Format("{0}Configuration.generated.cs", _model.Name);
        }
    }

	public override string TransformText()
	{
#>
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//		如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 <#= _model.Name #>ConfigurationAppend 分部方法。
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using FluentJson.Configuration;
using FluentJson;
using XIMALAYACOPY.Core.Models.<#=_model.ModuleName#>;

namespace XIMALAYACOPY.Core.Data
{
    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <typeparam name="T1"></typeparam>
    public partial class <#= _model.Name #>ConfigDecorator<T, T1> : JsonConfigDecorator<T, T1>
        where T : <#= _model.Name #>
        where T1 : class
    {

        /// <summary>
        /// 添加配置
        /// </summary>
        partial void AppendConfig();
        /// <summary>
        /// 配置类
        /// </summary>
        public <#= _model.Name #>ConfigDecorator(IJsonConfig decorator, JsonConfiguration<T1> config) : base(decorator, config) { }
       
        /// <summary>
        /// 添加配置
        /// </summary>
        public override void AddConfig()
        {
            base.AddConfig();
            this.AppendConfig();
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
